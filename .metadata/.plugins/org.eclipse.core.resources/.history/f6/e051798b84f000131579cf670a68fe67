import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;


public class Rocchio extends PositionalPostingList {

	private static String FolderPath;
	public static HashSet<String> distinctClass=new HashSet<String>();
	public static HashMap<Integer, String> fileClassHolder = new HashMap<Integer, String>();
	
	public static void main(String[] args) throws IOException {
		int fileCounter = 0;
		FolderPath = (new File(".").getAbsolutePath())+"/Classifier";
		File file = new File(FolderPath);
		String[] names = file.list();

		for(String name : names)
		{
			String subFolder = FolderPath + "\\"+ name;
		    if (new File(subFolder).isDirectory())
		    {
		    	distinctClass.add(name);
		        File subFile = new File(subFolder);
		        File[] subFileNames = subFile.listFiles();
		        for (File sub : subFileNames) {
				    if (sub.isFile()) {
				    	
						fileClassHolder.put(fileCounter,name);
			    	    fileNameHolder.put(fileCounter,sub.getName());
			    	    fileCounter++;
			    	    
			    	    BufferedReader br = new BufferedReader(new FileReader(subFolder+"/"+sub.getName()));
			    	    try
			    	    {
			    	    	int tokenCounter=0;
			    	    	String line = br.readLine();
			    	        while (line != null) {
			    	            String [] Terms = processWord(line).split(" ");
			    	            for (String Term : Terms) {
			    	            	//String [] tempTerms = processWord(Term).split(" ");
			    	            	//for (String tempTerm : tempTerms) {
			    	            	//if(!distinctTerms.contains(tempTerm))
				    	            //{
			    	            		if(!Term.equals(""))
			    	            		{
			    	            			distinctTerms.add(Term.trim());
			    	            			addPositionalPostingList(Term.trim(), fileCounter,tokenCounter);
			    	            			tokenCounter++;
			    	            		}
				    	            //}
			    	            	//}
								}
			    	            line = br.readLine();
			    	        }
			    	    } finally {
			    	        br.close();
			    	    }	 
				    }
		        }
		    }
		}

	}

}
